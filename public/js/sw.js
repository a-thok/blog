var CACHE_NAME = 'A-TALK-TO-ME-V1';
var urlsToCache = [
  '/',
  '/lib/prism.css',
  '/lib/prism.js',
  '/css/style.css',
  '/js/speak.js',
];

self.addEventListener('install', function (event) {
  event.waitUntil(
    caches
      .open(CACHE_NAME)
      .then(function (cache) { return cache.addAll(urlsToCache); })
  );
});

self.addEventListener('activate', function (event) {
  event.waitUntil(
    caches.keys()
      .then(function (keys) { return Promise.all(
        keys
          .filter(function (key) { return key !== CACHE_NAME; })
          .map(function (key) { return caches.delete(key); })
      ); })
  );
});

self.addEventListener('fetch', function (event) {
  var request = event.request;

  // should only intercept GET requests
  if (request.method !== 'GET') {
    return event.respondWith(fetch(request));
  }

  var cacheTheResponse = function (res) {
    // don't need to cache response if the request is failed
    if (!res || res.status !== 200 || res.type !== 'basic') {
      return res;
    }

    var clonedRes = res.clone();
    caches
      .open(CACHE_NAME)
      .then(function (cache) {
        cache.put(request, clonedRes);
      });
    return res;
  };

  return event.respondWith(
    caches.match(request)
      .then(function (cachedRes) {
        var networkedRes = fetch(request)
          .then(cacheTheResponse)
          // TODO: return an offline page when there is no cache nor network
          .catch(function () { return new Response('', {
            status: 503,
            statusText: 'Service Unavailable',
          }); });

        // will return cache if there is one, otherwise it will return the normal request result
        return cachedRes || networkedRes;
      })
  );
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3cuanMiLCJzb3VyY2VzIjpbInN3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENBQ0hFX05BTUUgPSAnQS1UQUxLLVRPLU1FLVYxJztcclxuY29uc3QgdXJsc1RvQ2FjaGUgPSBbXHJcbiAgJy8nLFxyXG4gICcvbGliL3ByaXNtLmNzcycsXHJcbiAgJy9saWIvcHJpc20uanMnLFxyXG4gICcvY3NzL3N0eWxlLmNzcycsXHJcbiAgJy9qcy9zcGVhay5qcycsXHJcbl07XHJcblxyXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2luc3RhbGwnLCAoZXZlbnQpID0+IHtcclxuICBldmVudC53YWl0VW50aWwoXHJcbiAgICBjYWNoZXNcclxuICAgICAgLm9wZW4oQ0FDSEVfTkFNRSlcclxuICAgICAgLnRoZW4oY2FjaGUgPT4gY2FjaGUuYWRkQWxsKHVybHNUb0NhY2hlKSlcclxuICApO1xyXG59KTtcclxuXHJcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignYWN0aXZhdGUnLCAoZXZlbnQpID0+IHtcclxuICBldmVudC53YWl0VW50aWwoXHJcbiAgICBjYWNoZXMua2V5cygpXHJcbiAgICAgIC50aGVuKGtleXMgPT4gUHJvbWlzZS5hbGwoXHJcbiAgICAgICAga2V5c1xyXG4gICAgICAgICAgLmZpbHRlcihrZXkgPT4ga2V5ICE9PSBDQUNIRV9OQU1FKVxyXG4gICAgICAgICAgLm1hcChrZXkgPT4gY2FjaGVzLmRlbGV0ZShrZXkpKVxyXG4gICAgICApKVxyXG4gICk7XHJcbn0pO1xyXG5cclxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmZXRjaCcsIChldmVudCkgPT4ge1xyXG4gIGNvbnN0IHsgcmVxdWVzdCB9ID0gZXZlbnQ7XHJcblxyXG4gIC8vIHNob3VsZCBvbmx5IGludGVyY2VwdCBHRVQgcmVxdWVzdHNcclxuICBpZiAocmVxdWVzdC5tZXRob2QgIT09ICdHRVQnKSB7XHJcbiAgICByZXR1cm4gZXZlbnQucmVzcG9uZFdpdGgoZmV0Y2gocmVxdWVzdCkpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgY2FjaGVUaGVSZXNwb25zZSA9IChyZXMpID0+IHtcclxuICAgIC8vIGRvbid0IG5lZWQgdG8gY2FjaGUgcmVzcG9uc2UgaWYgdGhlIHJlcXVlc3QgaXMgZmFpbGVkXHJcbiAgICBpZiAoIXJlcyB8fCByZXMuc3RhdHVzICE9PSAyMDAgfHwgcmVzLnR5cGUgIT09ICdiYXNpYycpIHtcclxuICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjbG9uZWRSZXMgPSByZXMuY2xvbmUoKTtcclxuICAgIGNhY2hlc1xyXG4gICAgICAub3BlbihDQUNIRV9OQU1FKVxyXG4gICAgICAudGhlbigoY2FjaGUpID0+IHtcclxuICAgICAgICBjYWNoZS5wdXQocmVxdWVzdCwgY2xvbmVkUmVzKTtcclxuICAgICAgfSk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBldmVudC5yZXNwb25kV2l0aChcclxuICAgIGNhY2hlcy5tYXRjaChyZXF1ZXN0KVxyXG4gICAgICAudGhlbigoY2FjaGVkUmVzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmV0d29ya2VkUmVzID0gZmV0Y2gocmVxdWVzdClcclxuICAgICAgICAgIC50aGVuKGNhY2hlVGhlUmVzcG9uc2UpXHJcbiAgICAgICAgICAvLyBUT0RPOiByZXR1cm4gYW4gb2ZmbGluZSBwYWdlIHdoZW4gdGhlcmUgaXMgbm8gY2FjaGUgbm9yIG5ldHdvcmtcclxuICAgICAgICAgIC5jYXRjaCgoKSA9PiBuZXcgUmVzcG9uc2UoJycsIHtcclxuICAgICAgICAgICAgc3RhdHVzOiA1MDMsXHJcbiAgICAgICAgICAgIHN0YXR1c1RleHQ6ICdTZXJ2aWNlIFVuYXZhaWxhYmxlJyxcclxuICAgICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gY2FjaGUgaWYgdGhlcmUgaXMgb25lLCBvdGhlcndpc2UgaXQgd2lsbCByZXR1cm4gdGhlIG5vcm1hbCByZXF1ZXN0IHJlc3VsdFxyXG4gICAgICAgIHJldHVybiBjYWNoZWRSZXMgfHwgbmV0d29ya2VkUmVzO1xyXG4gICAgICB9KVxyXG4gICk7XHJcbn0pO1xyXG4iXSwibmFtZXMiOlsiY29uc3QiXSwibWFwcGluZ3MiOiJBQUFBQSxHQUFLLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDO0FBQ3JDQSxHQUFLLENBQUMsV0FBVyxHQUFHO0VBQ2xCLEdBQUc7RUFDSCxnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixjQUFjO0NBQ2YsQ0FBQzs7QUFFRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFNBQUEsQ0FBQyxLQUFLLEVBQUUsQUFBRztFQUMxQyxLQUFLLENBQUMsU0FBUztJQUNiLE1BQU07T0FDSCxJQUFJLENBQUMsVUFBVSxDQUFDO09BQ2hCLElBQUksQ0FBQyxVQUFBLEtBQUssQ0FBQSxDQUFDLEFBQUcsU0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFBLENBQUM7R0FDNUMsQ0FBQztDQUNILENBQUMsQ0FBQzs7QUFFSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLFNBQUEsQ0FBQyxLQUFLLEVBQUUsQUFBRztFQUMzQyxLQUFLLENBQUMsU0FBUztJQUNiLE1BQU0sQ0FBQyxJQUFJLEVBQUU7T0FDVixJQUFJLENBQUMsVUFBQSxJQUFJLENBQUEsQ0FBQyxBQUFHLFNBQUEsT0FBTyxDQUFDLEdBQUc7UUFDdkIsSUFBSTtXQUNELE1BQU0sQ0FBQyxVQUFBLEdBQUcsQ0FBQSxDQUFDLEFBQUcsU0FBQSxHQUFHLEtBQUssVUFBVSxHQUFBLENBQUM7V0FDakMsR0FBRyxDQUFDLFVBQUEsR0FBRyxDQUFBLENBQUMsQUFBRyxTQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUEsQ0FBQztPQUNsQyxHQUFBLENBQUM7R0FDTCxDQUFDO0NBQ0gsQ0FBQyxDQUFDOztBQUVILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsU0FBQSxDQUFDLEtBQUssRUFBRSxBQUFHO0VBQ3hDLEFBQUssQUFBRyxJQUFBLE9BQU8saUJBQVQsQUFBUyxBQUFFLEFBQVEsQUFBQzs7O0VBRzFCLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUU7SUFDNUIsT0FBTyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0dBQzFDOztFQUVEQSxHQUFLLENBQUMsZ0JBQWdCLEdBQUcsU0FBQSxDQUFDLEdBQUcsRUFBRSxBQUFHOztJQUVoQyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO01BQ3RELE9BQU8sR0FBRyxDQUFDO0tBQ1o7O0lBRURBLEdBQUssQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzlCLE1BQU07T0FDSCxJQUFJLENBQUMsVUFBVSxDQUFDO09BQ2hCLElBQUksQ0FBQyxTQUFBLENBQUMsS0FBSyxFQUFFLEFBQUc7UUFDZixLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztPQUMvQixDQUFDLENBQUM7SUFDTCxPQUFPLEdBQUcsQ0FBQztHQUNaLENBQUM7O0VBRUYsT0FBTyxLQUFLLENBQUMsV0FBVztJQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztPQUNsQixJQUFJLENBQUMsU0FBQSxDQUFDLFNBQVMsRUFBRSxBQUFHO1FBQ25CQSxHQUFLLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7V0FDaEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDOztXQUV0QixLQUFLLENBQUMsU0FBQSxHQUFHLEFBQUcsU0FBQSxJQUFJLFFBQVEsQ0FBQyxFQUFFLEVBQUU7WUFDNUIsTUFBTSxFQUFFLEdBQUc7WUFDWCxVQUFVLEVBQUUscUJBQXFCO1dBQ2xDLENBQUMsR0FBQSxDQUFDLENBQUM7OztRQUdOLE9BQU8sU0FBUyxJQUFJLFlBQVksQ0FBQztPQUNsQyxDQUFDO0dBQ0wsQ0FBQztDQUNILENBQUMsQ0FBQzsifQ==
